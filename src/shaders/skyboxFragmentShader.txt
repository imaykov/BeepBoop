#version 400

in vec3 textureCoords;
out vec4 outColor;

uniform samplerCube cubeMap1;
uniform samplerCube cubeMap2;
uniform float blendFactor;

const float flatZone = 20;
const float lowerLimit = -40.0;
const float upperLimit = 150.0;


void main(void){
    vec4 texture1 = texture(cubeMap1, textureCoords);
    vec4 texture2 = texture(cubeMap2, textureCoords);



    vec4 finalColor = mix(texture1, texture2, blendFactor);

    // Generate a factor to be used in most cases
    float factor = (textureCoords.y - lowerLimit) / (upperLimit - lowerLimit);
    factor = clamp(factor, 0.0, 1.0);

    float alternateFactor = -(textureCoords.y - lowerLimit + flatZone) / (upperLimit - lowerLimit);
    alternateFactor = clamp(alternateFactor, 0.1, 1.0);

    finalColor.a = max(factor, alternateFactor);

    outColor = finalColor;
}